// <auto-generated />
using System;
using LearningManagement.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LearningManagement.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240103124151_AddedListProperty2")]
    partial class AddedListProperty2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LearningManagement.Data.Institution", b =>
                {
                    b.Property<int>("InstitutionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InstitutionId"));

                    b.Property<string>("Address")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("BrandingTagLine")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ContactNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("InstitutionLogoName")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("InstitutionName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Website")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("InstitutionId");

                    b.ToTable("Institution", (string)null);
                });

            modelBuilder.Entity("LearningManagement.Data.Models.AcademicSession", b =>
                {
                    b.Property<int>("AcademicSessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AcademicSessionId"));

                    b.Property<DateTime>("CreatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date");

                    b.Property<int>("InstitutionId")
                        .HasColumnType("int");

                    b.Property<string>("SessionDescription")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("SessionName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("AcademicSessionId");

                    b.HasIndex("InstitutionId");

                    b.ToTable("AcademicSession", (string)null);
                });

            modelBuilder.Entity("LearningManagement.Data.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("InstitutionId")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("InstitutionId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "A0456563-F978-4135-B563-97F23EA02FDA",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "A0456563-F978-4135-B563-97F23EA02FDA",
                            Email = "Admin@admin.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "ADMIN@ADMIN.COM",
                            NormalizedUserName = "APPADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEGMo45sRouCEGVVV96uYbNRvzC13oqKJvjHoQfyiVODOZuNxuu9/Bu7CAmmC/QWbBg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c6ed98d4-0998-4703-8ae4-bcfa606104b2",
                            TwoFactorEnabled = false,
                            UserName = "AppAdmin",
                            UserType = "AppAdmin"
                        });
                });

            modelBuilder.Entity("LearningManagement.Data.Models.InstitutionAdmin", b =>
                {
                    b.Property<int>("InstitutionAdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InstitutionAdminId"));

                    b.Property<string>("ApplicationUserId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("nvarchar(max)")
                        .HasComputedColumnSql("[FirstName] + ' ' + [LastName]", true);

                    b.Property<int>("InstitutionId")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InstitutionAdminId");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique()
                        .HasFilter("[ApplicationUserId] IS NOT NULL");

                    b.HasIndex("InstitutionId");

                    b.ToTable("InstitutionAdmin", (string)null);
                });

            modelBuilder.Entity("LearningManagement.Data.Models.InstitutionClass", b =>
                {
                    b.Property<int>("InstitutionClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InstitutionClassId"));

                    b.Property<string>("ClassName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<int>("InstitutionId")
                        .HasColumnType("int");

                    b.HasKey("InstitutionClassId");

                    b.HasIndex("InstitutionId");

                    b.ToTable("InstitutionClass", (string)null);
                });

            modelBuilder.Entity("LearningManagement.Data.Models.InstitutionCourse", b =>
                {
                    b.Property<int>("InstitutionCourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InstitutionCourseId"));

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("Descriptions")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("InstitutionId")
                        .HasColumnType("int");

                    b.Property<string>("Prerequisites")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("InstitutionCourseId");

                    b.HasIndex("InstitutionId");

                    b.ToTable("InstitutionCourse", (string)null);
                });

            modelBuilder.Entity("LearningManagement.Data.Models.InstitutionStudent", b =>
                {
                    b.Property<int>("InstitutionStudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InstitutionStudentId"));

                    b.Property<DateTime?>("AdmissionDate")
                        .HasColumnType("datetime");

                    b.Property<string>("AdmissionNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ApplicationUserId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("BloodGroup")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FatherName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("nvarchar(max)")
                        .HasComputedColumnSql("[FirstName] + ' ' + [LastName]", true);

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ImageFileName")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("InstitutionId")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MotherName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Religion")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("InstitutionStudentId");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique()
                        .HasFilter("[ApplicationUserId] IS NOT NULL");

                    b.HasIndex("InstitutionId");

                    b.ToTable("InstitutionStudent", (string)null);
                });

            modelBuilder.Entity("LearningManagement.Data.Models.InstitutionTeacher", b =>
                {
                    b.Property<int>("InstitutionTeacherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InstitutionTeacherId"));

                    b.Property<string>("ApplicationUserId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("BloodGroup")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("DegreePassResult")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EducationQualification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("EmergencyContactName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmergencyContactPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExamminationPassYear")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("nvarchar(max)")
                        .HasComputedColumnSql("[FirstName] + ' ' + [LastName]", true);

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("GraduationYear")
                        .HasColumnType("int");

                    b.Property<bool>("HasHealthInsurance")
                        .HasColumnType("bit");

                    b.Property<string>("ImageFileName")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("InstitutionId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("JoiningDate")
                        .HasColumnType("date");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalConditions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PreviousInstitutions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Religion")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Subjects")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TeacherAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("TeachingRating")
                        .HasColumnType("real");

                    b.Property<string>("University")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("YearsOfExperience")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InstitutionTeacherId");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique()
                        .HasFilter("[ApplicationUserId] IS NOT NULL");

                    b.HasIndex("InstitutionId");

                    b.ToTable("InstitutionTeacher", (string)null);
                });

            modelBuilder.Entity("LearningManagement.Data.Models.StudentInClass", b =>
                {
                    b.Property<int>("StudentInClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentInClassId"));

                    b.Property<int>("AcademicSessionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<int>("InstitutionClassId")
                        .HasColumnType("int");

                    b.Property<int>("InstitutionId")
                        .HasColumnType("int");

                    b.Property<int>("InstitutionStudentId")
                        .HasColumnType("int");

                    b.HasKey("StudentInClassId");

                    b.HasIndex("AcademicSessionId");

                    b.HasIndex("InstitutionClassId");

                    b.HasIndex("InstitutionId");

                    b.HasIndex("InstitutionStudentId");

                    b.ToTable("StudentInClass", (string)null);
                });

            modelBuilder.Entity("LearningManagement.Data.Models.TeacherWiseCourse", b =>
                {
                    b.Property<int>("TeacherWiseCourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TeacherWiseCourseId"));

                    b.Property<DateTime>("CreatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<int>("InstitutionClassId")
                        .HasColumnType("int");

                    b.Property<int>("InstitutionCourseId")
                        .HasColumnType("int");

                    b.Property<int>("InstitutionId")
                        .HasColumnType("int");

                    b.Property<int>("InstitutionTeacherId")
                        .HasColumnType("int");

                    b.HasKey("TeacherWiseCourseId");

                    b.HasIndex("InstitutionClassId");

                    b.HasIndex("InstitutionCourseId");

                    b.HasIndex("InstitutionId");

                    b.HasIndex("InstitutionTeacherId");

                    b.ToTable("TeacherWiseCourse", (string)null);
                });

            modelBuilder.Entity("LearningManagement.Data.Models.TeacherWiseCourseContent", b =>
                {
                    b.Property<int>("TeacherWiseCourseContentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TeacherWiseCourseContentId"));

                    b.Property<string>("ContentName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("Details")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Link")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("TeacherWiseCourseId")
                        .HasColumnType("int");

                    b.Property<string>("UploadedFileName")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("TeacherWiseCourseContentId");

                    b.HasIndex("TeacherWiseCourseId");

                    b.ToTable("TeacherWiseCourseContent", (string)null);
                });

            modelBuilder.Entity("LearningManagement.Data.Models.TeacherWiseStudentCourse", b =>
                {
                    b.Property<int>("TeacherWiseStudentCourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TeacherWiseStudentCourseId"));

                    b.Property<DateTime>("CreatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<int>("InstitutionId")
                        .HasColumnType("int");

                    b.Property<int>("StudentInClassId")
                        .HasColumnType("int");

                    b.Property<int>("TeacherWiseCourseId")
                        .HasColumnType("int");

                    b.HasKey("TeacherWiseStudentCourseId");

                    b.HasIndex("InstitutionId");

                    b.HasIndex("StudentInClassId");

                    b.HasIndex("TeacherWiseCourseId");

                    b.ToTable("TeacherWiseStudentCourse", (string)null);
                });

            modelBuilder.Entity("LearningManagement.Data.ViewModels.EduQualification", b =>
                {
                    b.Property<DateTime?>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Exparience")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Qulifiation")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("EduQualification");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "fb76a482-3d73-4e28-9155-581a1a2cbea4",
                            ConcurrencyStamp = "fb76a482-3d73-4e28-9155-581a1a2cbea4",
                            Name = "AppAdmin",
                            NormalizedName = "APPADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "A0456563-F978-4135-B563-97F23EA02FDA",
                            RoleId = "fb76a482-3d73-4e28-9155-581a1a2cbea4"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("LearningManagement.Data.Models.AcademicSession", b =>
                {
                    b.HasOne("LearningManagement.Data.Institution", "Institution")
                        .WithMany("AcademicSessions")
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Institution");
                });

            modelBuilder.Entity("LearningManagement.Data.Models.ApplicationUser", b =>
                {
                    b.HasOne("LearningManagement.Data.Institution", "Institution")
                        .WithMany("ApplicationUsers")
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Institution");
                });

            modelBuilder.Entity("LearningManagement.Data.Models.InstitutionAdmin", b =>
                {
                    b.HasOne("LearningManagement.Data.Models.ApplicationUser", "ApplicationUser")
                        .WithOne("InstitutionAdmin")
                        .HasForeignKey("LearningManagement.Data.Models.InstitutionAdmin", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("LearningManagement.Data.Institution", "Institution")
                        .WithMany("InstitutionAdmins")
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Institution");
                });

            modelBuilder.Entity("LearningManagement.Data.Models.InstitutionClass", b =>
                {
                    b.HasOne("LearningManagement.Data.Institution", "Institution")
                        .WithMany("InstitutionClasses")
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Institution");
                });

            modelBuilder.Entity("LearningManagement.Data.Models.InstitutionCourse", b =>
                {
                    b.HasOne("LearningManagement.Data.Institution", "Institution")
                        .WithMany("InstitutionCourses")
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Institution");
                });

            modelBuilder.Entity("LearningManagement.Data.Models.InstitutionStudent", b =>
                {
                    b.HasOne("LearningManagement.Data.Models.ApplicationUser", "ApplicationUser")
                        .WithOne("InstitutionStudent")
                        .HasForeignKey("LearningManagement.Data.Models.InstitutionStudent", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("LearningManagement.Data.Institution", "Institution")
                        .WithMany("InstitutionStudents")
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Institution");
                });

            modelBuilder.Entity("LearningManagement.Data.Models.InstitutionTeacher", b =>
                {
                    b.HasOne("LearningManagement.Data.Models.ApplicationUser", "ApplicationUser")
                        .WithOne("InstitutionTeacher")
                        .HasForeignKey("LearningManagement.Data.Models.InstitutionTeacher", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("LearningManagement.Data.Institution", "Institution")
                        .WithMany("InstitutionTeachers")
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Institution");
                });

            modelBuilder.Entity("LearningManagement.Data.Models.StudentInClass", b =>
                {
                    b.HasOne("LearningManagement.Data.Models.AcademicSession", "AcademicSession")
                        .WithMany("StudentInClasses")
                        .HasForeignKey("AcademicSessionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LearningManagement.Data.Models.InstitutionClass", "InstitutionClass")
                        .WithMany("StudentInClasses")
                        .HasForeignKey("InstitutionClassId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LearningManagement.Data.Institution", "Institution")
                        .WithMany("StudentInClasses")
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LearningManagement.Data.Models.InstitutionStudent", "InstitutionStudent")
                        .WithMany("StudentInClasses")
                        .HasForeignKey("InstitutionStudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AcademicSession");

                    b.Navigation("Institution");

                    b.Navigation("InstitutionClass");

                    b.Navigation("InstitutionStudent");
                });

            modelBuilder.Entity("LearningManagement.Data.Models.TeacherWiseCourse", b =>
                {
                    b.HasOne("LearningManagement.Data.Models.InstitutionClass", "InstitutionClass")
                        .WithMany("TeacherWiseCourses")
                        .HasForeignKey("InstitutionClassId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LearningManagement.Data.Models.InstitutionCourse", "InstitutionCourse")
                        .WithMany("TeacherWiseCourses")
                        .HasForeignKey("InstitutionCourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LearningManagement.Data.Institution", "Institution")
                        .WithMany("TeacherWiseCourses")
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LearningManagement.Data.Models.InstitutionTeacher", "InstitutionTeacher")
                        .WithMany("TeacherWiseCourses")
                        .HasForeignKey("InstitutionTeacherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Institution");

                    b.Navigation("InstitutionClass");

                    b.Navigation("InstitutionCourse");

                    b.Navigation("InstitutionTeacher");
                });

            modelBuilder.Entity("LearningManagement.Data.Models.TeacherWiseCourseContent", b =>
                {
                    b.HasOne("LearningManagement.Data.Models.TeacherWiseCourse", "TeacherWiseCourse")
                        .WithMany("Contents")
                        .HasForeignKey("TeacherWiseCourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TeacherWiseCourse");
                });

            modelBuilder.Entity("LearningManagement.Data.Models.TeacherWiseStudentCourse", b =>
                {
                    b.HasOne("LearningManagement.Data.Institution", "Institution")
                        .WithMany("TeacherWiseStudentCourses")
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LearningManagement.Data.Models.StudentInClass", "StudentInClass")
                        .WithMany("TeacherWiseStudentCourses")
                        .HasForeignKey("StudentInClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LearningManagement.Data.Models.TeacherWiseCourse", "TeacherWiseCourse")
                        .WithMany("TeacherWiseStudentCourses")
                        .HasForeignKey("TeacherWiseCourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Institution");

                    b.Navigation("StudentInClass");

                    b.Navigation("TeacherWiseCourse");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("LearningManagement.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("LearningManagement.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LearningManagement.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("LearningManagement.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LearningManagement.Data.Institution", b =>
                {
                    b.Navigation("AcademicSessions");

                    b.Navigation("ApplicationUsers");

                    b.Navigation("InstitutionAdmins");

                    b.Navigation("InstitutionClasses");

                    b.Navigation("InstitutionCourses");

                    b.Navigation("InstitutionStudents");

                    b.Navigation("InstitutionTeachers");

                    b.Navigation("StudentInClasses");

                    b.Navigation("TeacherWiseCourses");

                    b.Navigation("TeacherWiseStudentCourses");
                });

            modelBuilder.Entity("LearningManagement.Data.Models.AcademicSession", b =>
                {
                    b.Navigation("StudentInClasses");
                });

            modelBuilder.Entity("LearningManagement.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("InstitutionAdmin");

                    b.Navigation("InstitutionStudent");

                    b.Navigation("InstitutionTeacher");
                });

            modelBuilder.Entity("LearningManagement.Data.Models.InstitutionClass", b =>
                {
                    b.Navigation("StudentInClasses");

                    b.Navigation("TeacherWiseCourses");
                });

            modelBuilder.Entity("LearningManagement.Data.Models.InstitutionCourse", b =>
                {
                    b.Navigation("TeacherWiseCourses");
                });

            modelBuilder.Entity("LearningManagement.Data.Models.InstitutionStudent", b =>
                {
                    b.Navigation("StudentInClasses");
                });

            modelBuilder.Entity("LearningManagement.Data.Models.InstitutionTeacher", b =>
                {
                    b.Navigation("TeacherWiseCourses");
                });

            modelBuilder.Entity("LearningManagement.Data.Models.StudentInClass", b =>
                {
                    b.Navigation("TeacherWiseStudentCourses");
                });

            modelBuilder.Entity("LearningManagement.Data.Models.TeacherWiseCourse", b =>
                {
                    b.Navigation("Contents");

                    b.Navigation("TeacherWiseStudentCourses");
                });
#pragma warning restore 612, 618
        }
    }
}
